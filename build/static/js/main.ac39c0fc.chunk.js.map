{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","check","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","board","createBoard","hasWon","flipCellsAround","i","nrows","j","ncols","chance","Math","floor","random","coord","_this$props","_coord","slicedToArray","y","x","flipCell","flgHasWon","map","line","filter","row","setState","_this2","myBoard","item","idx","key","items","id","src_Cell_0","defaultProps","chanceLightStartsOn","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ac39c0fc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Cell.css';\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe(this.props.check);\n    // console.log(evt.target);\n  }\n\n  render() {\n    let classes = 'Cell' + (this.props.isLit ? ' Cell-lit' : '');\n\n    // console.log(this.props.check);\n    // console.log('id', this.props.check2);\n    return <td className={classes} onClick={this.handleClick} />;\n  }\n}\n\nexport default Cell;\n","import React, { Component } from 'react';\n// import { rand } from './randComp';\nimport Cell from './Cell';\nimport './Board.css';\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    ncols: 5,\n    nrows: 5,\n    chanceLightStartsOn: Math.floor(Math.random() * 2),\n  };\n\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      board: this.createBoard(),\n      hasWon: true,\n    };\n    // this.createBoard = this.createBoard.bind(this)\n    this.flipCellsAround = this.flipCellsAround.bind(this);\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n\n    // TODO: create array-of-arrays of true/false values\n    for (let i = 0; i < this.props.nrows; i++) {\n      board[i] = [];\n      for (let j = 0; j < this.props.ncols; j++) {\n        let chance = Math.floor(Math.random() * 2);\n        // let chance = 0;\n\n        board[i][j] = chance;\n      }\n    }\n\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord;\n    // let [y, x] = coord.split('-').map(Number);\n    // let [y, x] = coord.split('-');\n    // console.log(y, x);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    flipCell(y, x);\n    flipCell(y - 1, x);\n    flipCell(y + 1, x);\n    flipCell(y, x - 1);\n    flipCell(y, x + 1);\n    // console.log(this.state.board);\n    let checkingVal;\n    let flgHasWon = false;\n    board.map((line) => {\n      line.filter((row) => {\n        if (row === 1 || row === true) {\n          checkingVal = true;\n          flgHasWon = true;\n          // console.log('row', row, 'checkingVal', checkingVal);\n          return;\n        } else {\n          checkingVal = false;\n        }\n      });\n    });\n    // console.log('checkingVal: ', checkingVal);\n    // console.log('flgHasWon: ', flgHasWon);\n\n    // TODO: flip this cell and the cells around it\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    // this.setState({ board, hasWon });\n    this.setState({ board, hasWon: flgHasWon });\n  }\n\n  /** Render game board or winning message. */\n\n  render() {\n    // console.log(this.state.hasWon);\n    // if the game is won, just show a winning msg & render nothing else\n    // TODO\n    // make table board\n    // TODO\n\n    // console.log(this.state.board);\n\n    let myBoard = this.state.board.map((item, idx) => (\n      <tr key={idx}>\n        {item.map((items, id) => (\n          <Cell\n            isLit={items}\n            key={[idx, id]}\n            check={[idx, id]}\n            flipCellsAroundMe={this.flipCellsAround}\n          />\n        ))}\n      </tr>\n    ));\n\n    return (\n      <div>\n        <div className=\"center blue\">\n          <h1 className=\"tTitle blue\">\n            {this.state.hasWon === false ? 'You Won!!' : 'Lights Out'}\n          </h1>\n        </div>\n        <table className=\"Board\">\n          <tbody> {myBoard}</tbody>\n        </table>\n      </div>\n    );\n    //   <Cell\n    //   isLit={items}\n    //   key={id}\n    //   flipCellsAroundMe={this.flipCellsAround}\n    // />\n  }\n}\n\nexport default Board;\n\n// for (let i = 0; i < this.props.nrows; i++) {\n//   // let preBoard = [];\n//   // // for (let j = 0; j < this.props.ncols; i++) {\n//   let chance = Math.floor(Math.random() * 2);\n//   // if (chance === 0) {\n//   //   chance = true;\n//   //   board.push([chance]);\n//   // }\n\n//   // if (chance === 1) {\n//   //   chance = false;\n//   //   board.push([chance]);\n//   // }\n//   // }\n//   board[i] = new Array(chance);\n// }\n\n// checking for true false values\n\n// console.log(checkingVal);\n// let finalResult;\n// this.state.board.map(b => {\n//   b.map(q => {\n//     // console.log(q);\n//     if (q === 1 || q === false) {\n//       finalResult = true;\n//       // break;\n//       return finalResult;\n//     }\n//     finalResult = false;\n//     // return finalResult;\n//   });\n//   return finalResult;\n// });\n\n// console.log(finalResult);\n\n// let results = board.every(b => {\n//   // console.log(b);\n//   b.every(q => {\n//     console.log(q);\n//     return q === 1 || q === true;\n//   });\n// });\n// console.log(results);\n","import React, { Component } from 'react';\nimport Board from './Board';\nimport './App.css';\n\n/** Simple app that just shows the LightsOut game. */\n// !!!!!!!!! Read before starting\n// as of right now we have the click handler for collecting the coords\n// maybe the click handler shouldn't do that, maybe an onChange would be better\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Board\n          ncols={5}\n          nrows={5}\n          chanceLightStartsOn={Math.floor(Math.random() * 2)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}