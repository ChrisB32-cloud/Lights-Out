{"ast":null,"code":"import _slicedToArray from \"/Users/chrisbrown/Desktop/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/chrisbrown/Desktop/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chrisbrown/Desktop/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/chrisbrown/Desktop/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/chrisbrown/Desktop/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/chrisbrown/Desktop/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/chrisbrown/Desktop/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/chrisbrown/Desktop/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from 'react'; // import { rand } from './randComp';\n\nimport Cell from './Cell';\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      board: _this.createBoard(),\n      hasWon: false\n    }; // this.createBoard = this.createBoard.bind(this)\n\n    _this.flipCellsAround = _this.flipCellsAround.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      for (var i = 0; i < this.props.nrows; i++) {\n        board[i] = [];\n\n        for (var j = 0; j < this.props.ncols; j++) {\n          var chance = Math.floor(Math.random() * 2);\n          board[i][j] = chance;\n        }\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord = _slicedToArray(coord, 2),\n          y = _coord[0],\n          x = _coord[1]; // let [y, x] = coord.split('-').map(Number);\n      // let [y, x] = coord.split('-');\n      // console.log(y, x);\n\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        // let [y, x] = coord;\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // flipCell();\n      // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n      // this.setState({ board, hasWon });\n\n\n      this.setState({\n        board: board\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n      // console.log(this.props.chanceLightStartsOn);\n      // console.log(this.state.board);\n      // console.log(board);\n      var myBoard = this.state.board.map(function (item, idx) {\n        return /*#__PURE__*/React.createElement(\"tr\", {\n          key: idx,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 7\n          }\n        }, item.map(function (items, id) {\n          return /*#__PURE__*/React.createElement(Cell, {\n            isLit: items,\n            key: [idx, id],\n            check: [idx, id] // check2={id}\n            ,\n            flipCellsAroundMe: _this2.flipCellsAround,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 11\n            }\n          });\n        }));\n      });\n      return /*#__PURE__*/React.createElement(\"table\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 9\n        }\n      }, myBoard)); //   <Cell\n      //   isLit={items}\n      //   key={id}\n      //   flipCellsAroundMe={this.flipCellsAround}\n      // />\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  ncols: 5,\n  nrows: 5,\n  chanceLightStartsOn: Math.floor(Math.random() * 2)\n};\nexport default Board; // for (let i = 0; i < this.props.nrows; i++) {\n//   // let preBoard = [];\n//   // // for (let j = 0; j < this.props.ncols; i++) {\n//   let chance = Math.floor(Math.random() * 2);\n//   // if (chance === 0) {\n//   //   chance = true;\n//   //   board.push([chance]);\n//   // }\n//   // if (chance === 1) {\n//   //   chance = false;\n//   //   board.push([chance]);\n//   // }\n//   // }\n//   board[i] = new Array(chance);\n// }","map":{"version":3,"sources":["/Users/chrisbrown/Desktop/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","props","state","board","createBoard","hasWon","flipCellsAround","bind","i","nrows","j","ncols","chance","Math","floor","random","coord","y","x","flipCell","setState","myBoard","map","item","idx","items","id","defaultProps","chanceLightStartsOn"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import { rand } from './randComp';\nimport Cell from './Cell';\nimport './Board.css';\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    ncols: 5,\n    nrows: 5,\n    chanceLightStartsOn: Math.floor(Math.random() * 2)\n  };\n\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      board: this.createBoard(),\n      hasWon: false\n    };\n    // this.createBoard = this.createBoard.bind(this)\n    this.flipCellsAround = this.flipCellsAround.bind(this);\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n\n    // TODO: create array-of-arrays of true/false values\n    for (let i = 0; i < this.props.nrows; i++) {\n      board[i] = [];\n      for (let j = 0; j < this.props.ncols; j++) {\n        let chance = Math.floor(Math.random() * 2);\n\n        board[i][j] = chance;\n      }\n    }\n\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord;\n    // let [y, x] = coord.split('-').map(Number);\n    // let [y, x] = coord.split('-');\n    // console.log(y, x);\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      // let [y, x] = coord;\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    // flipCell();\n    // TODO: flip this cell and the cells around it\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    // this.setState({ board, hasWon });\n    this.setState({ board });\n  }\n\n  /** Render game board or winning message. */\n\n  render() {\n    // if the game is won, just show a winning msg & render nothing else\n    // TODO\n    // make table board\n    // TODO\n    // console.log(this.props.chanceLightStartsOn);\n    // console.log(this.state.board);\n    // console.log(board);\n\n    let myBoard = this.state.board.map((item, idx) => (\n      <tr key={idx}>\n        {item.map((items, id) => (\n          <Cell\n            isLit={items}\n            key={[idx, id]}\n            check={[idx, id]}\n            // check2={id}\n            flipCellsAroundMe={this.flipCellsAround}\n          />\n        ))}\n      </tr>\n    ));\n\n    return (\n      <table>\n        <tbody>{myBoard}</tbody>\n      </table>\n    );\n    //   <Cell\n    //   isLit={items}\n    //   key={id}\n    //   flipCellsAroundMe={this.flipCellsAround}\n    // />\n  }\n}\n\nexport default Board;\n\n// for (let i = 0; i < this.props.nrows; i++) {\n//   // let preBoard = [];\n//   // // for (let j = 0; j < this.props.ncols; i++) {\n//   let chance = Math.floor(Math.random() * 2);\n//   // if (chance === 0) {\n//   //   chance = true;\n//   //   board.push([chance]);\n//   // }\n\n//   // if (chance === 1) {\n//   //   chance = false;\n//   //   board.push([chance]);\n//   // }\n//   // }\n//   board[i] = new Array(chance);\n// }\n"]},"metadata":{},"sourceType":"module"}