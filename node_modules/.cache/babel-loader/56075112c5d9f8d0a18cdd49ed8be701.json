{"ast":null,"code":"import _slicedToArray from \"/Users/chrisbrown/Desktop/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/chrisbrown/Desktop/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chrisbrown/Desktop/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/chrisbrown/Desktop/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/chrisbrown/Desktop/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/chrisbrown/Desktop/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/chrisbrown/Desktop/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from 'react';\nimport { rand } from './randComp';\nimport Cell from './Cell';\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      board: [],\n      hasWon: false\n    }; // this.createBoard = this.createBoard.bind(this)\n\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = []; // let chance = this.props.chanceLightStartsOn;\n      // TODO: create array-of-arrays of true/false values\n\n      for (var i = 0; i < this.props.nrows; i++) {\n        var chance = Math.floor(Math.random() * 2);\n        board[i] = [chance];\n\n        for (var j = 0; j < this.props.ncols; j++) {\n          var _chance = Math.floor(Math.random() * 2);\n\n          if (_chance === 0) {\n            _chance = true;\n            board[i][j] = _chance;\n          }\n\n          if (_chance === 1) {\n            _chance = false;\n            board[i][j] = _chance;\n          }\n        } // board[i] = new Array(this.props.ncols);\n\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split('-').map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n      // this.setState({ board, hasWon });\n\n\n      this.setState({\n        board: board\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n      // console.log(this.props.chanceLightStartsOn);\n      console.log(this.state.board); // console.log(board);\n\n      return /*#__PURE__*/React.createElement(\"table\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }\n      }, this.createBoard())));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  ncols: 5,\n  nrows: 5,\n  chanceLightStartsOn: Math.floor(Math.random() * 2)\n};\nexport default Board; // for (let i = 0; i < this.props.nrows; i++) {\n//   // let preBoard = [];\n//   // // for (let j = 0; j < this.props.ncols; i++) {\n//   let chance = Math.floor(Math.random() * 2);\n//   // if (chance === 0) {\n//   //   chance = true;\n//   //   board.push([chance]);\n//   // }\n//   // if (chance === 1) {\n//   //   chance = false;\n//   //   board.push([chance]);\n//   // }\n//   // }\n//   board[i] = new Array(chance);\n// }","map":{"version":3,"sources":["/Users/chrisbrown/Desktop/react-lights-out-starter/src/Board.js"],"names":["React","Component","rand","Cell","Board","props","state","board","hasWon","i","nrows","chance","Math","floor","random","j","ncols","coord","split","map","Number","y","x","flipCell","setState","console","log","createBoard","defaultProps","chanceLightStartsOn"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { rand } from './randComp';\nimport Cell from './Cell';\nimport './Board.css';\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    ncols: 5,\n    nrows: 5,\n    chanceLightStartsOn: Math.floor(Math.random() * 2)\n  };\n\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      board: [],\n      hasWon: false\n    };\n    // this.createBoard = this.createBoard.bind(this)\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n\n    // let chance = this.props.chanceLightStartsOn;\n    // TODO: create array-of-arrays of true/false values\n    for (let i = 0; i < this.props.nrows; i++) {\n      let chance = Math.floor(Math.random() * 2);\n      board[i] = [chance];\n      for (let j = 0; j < this.props.ncols; j++) {\n        let chance = Math.floor(Math.random() * 2);\n        if (chance === 0) {\n          chance = true;\n          board[i][j] = chance;\n        }\n        if (chance === 1) {\n          chance = false;\n          board[i][j] = chance;\n        }\n      }\n\n      // board[i] = new Array(this.props.ncols);\n    }\n\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split('-').map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    // this.setState({ board, hasWon });\n    this.setState({ board });\n  }\n\n  /** Render game board or winning message. */\n\n  render() {\n    // if the game is won, just show a winning msg & render nothing else\n    // TODO\n    // make table board\n    // TODO\n    // console.log(this.props.chanceLightStartsOn);\n    console.log(this.state.board);\n    // console.log(board);\n    return (\n      <table>\n        <tbody>\n          <tr>{this.createBoard()}</tr>\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default Board;\n\n// for (let i = 0; i < this.props.nrows; i++) {\n//   // let preBoard = [];\n//   // // for (let j = 0; j < this.props.ncols; i++) {\n//   let chance = Math.floor(Math.random() * 2);\n//   // if (chance === 0) {\n//   //   chance = true;\n//   //   board.push([chance]);\n//   // }\n\n//   // if (chance === 1) {\n//   //   chance = false;\n//   //   board.push([chance]);\n//   // }\n//   // }\n//   board[i] = new Array(chance);\n// }\n"]},"metadata":{},"sourceType":"module"}