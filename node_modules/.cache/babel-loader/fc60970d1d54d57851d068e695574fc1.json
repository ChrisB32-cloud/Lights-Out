{"ast":null,"code":"import _slicedToArray from \"/Users/chrisbrown/Desktop/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/chrisbrown/Desktop/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chrisbrown/Desktop/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/chrisbrown/Desktop/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/chrisbrown/Desktop/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/chrisbrown/Desktop/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/chrisbrown/Desktop/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from 'react';\nimport Cell from './Cell';\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      board: [],\n      hasWon: false\n    };\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var _this2 = this;\n\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      var chis = this.props.nrows.forEach(function (row) {\n        _this2.props.ncols.forEach(function (col) {\n          return /*#__PURE__*/React.createElement(Cell, {\n            isLit: true,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 39\n            }\n          });\n        });\n      });\n      board.push(chis);\n      return board;\n    } // createBoard()\n\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split('-').map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      console.log(123);\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n      // this.setState({ board, hasWon });\n\n\n      this.setState({\n        board: board\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n      return /*#__PURE__*/React.createElement(\"table\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }\n      }, this.createBoard)));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  ncols: 5,\n  nrows: 5\n};\nexport default Board;","map":{"version":3,"sources":["/Users/chrisbrown/Desktop/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","props","state","board","hasWon","chis","nrows","forEach","row","ncols","col","push","coord","split","map","Number","y","x","console","log","flipCell","setState","createBoard","defaultProps"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;IA0BMC,K;;;AAMJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,+EAAMA,KAAN,GADiB,CAGjB;;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,EADI;AAEXC,MAAAA,MAAM,EAAE;AAFG,KAAb;AAJiB;AAQlB;AAED;;;;;kCAEc;AAAA;;AACZ,UAAID,KAAK,GAAG,EAAZ,CADY,CAEZ;;AACA,UAAIE,IAAI,GAAG,KAAKJ,KAAL,CAAWK,KAAX,CAAiBC,OAAjB,CAAyB,UAAAC,GAAG,EAAI;AACzC,QAAA,MAAI,CAACP,KAAL,CAAWQ,KAAX,CAAiBF,OAAjB,CAAyB,UAAAG,GAAG;AAAA,8BAAI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAE,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAJ;AAAA,SAA5B;AACD,OAFU,CAAX;AAGAP,MAAAA,KAAK,CAACQ,IAAN,CAAWN,IAAX;AACA,aAAOF,KAAP;AACD,K,CAED;;AACA;;;;oCAEgBS,K,EAAO;AAAA,wBACE,KAAKX,KADP;AAAA,UACfQ,KADe,eACfA,KADe;AAAA,UACRH,KADQ,eACRA,KADQ;AAErB,UAAIH,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAvB;;AAFqB,6BAGRS,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAHQ;AAAA;AAAA,UAGhBC,CAHgB;AAAA,UAGbC,CAHa;;AAIrBC,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;;AACA,eAASC,QAAT,CAAkBJ,CAAlB,EAAqBC,CAArB,EAAwB;AACtB;AAEA,YAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGR,KAAd,IAAuBO,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGV,KAAzC,EAAgD;AAC9CH,UAAAA,KAAK,CAACa,CAAD,CAAL,CAASC,CAAT,IAAc,CAACd,KAAK,CAACa,CAAD,CAAL,CAASC,CAAT,CAAf;AACD;AACF,OAXoB,CAarB;AAEA;AACA;AAEA;;;AACA,WAAKI,QAAL,CAAc;AAAElB,QAAAA,KAAK,EAALA;AAAF,OAAd;AACD;AAED;;;;6BAES;AACP;AACA;AACA;AACA;AACA,0BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMG,KAAKmB,WANR,CADF,CADF,CADF;AAcD;;;;EA1EiBxB,S;;AAAdE,K,CACGuB,Y,GAAe;AACpBd,EAAAA,KAAK,EAAE,CADa;AAEpBH,EAAAA,KAAK,EAAE;AAFa,C;AA4ExB,eAAeN,KAAf","sourcesContent":["import React, { Component } from 'react';\nimport Cell from './Cell';\nimport './Board.css';\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    ncols: 5,\n    nrows: 5\n  };\n\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      board: [],\n      hasWon: false\n    };\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    let chis = this.props.nrows.forEach(row => {\n      this.props.ncols.forEach(col => <Cell isLit={true} />);\n    });\n    board.push(chis);\n    return board;\n  }\n\n  // createBoard()\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split('-').map(Number);\n    console.log(123);\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    // this.setState({ board, hasWon });\n    this.setState({ board });\n  }\n\n  /** Render game board or winning message. */\n\n  render() {\n    // if the game is won, just show a winning msg & render nothing else\n    // TODO\n    // make table board\n    // TODO\n    return (\n      <table>\n        <tbody>\n          <tr>\n            {/* <Cell\n              // isLit={false}\n              flipCellsAroundMe={this.flipCellsAround}\n              flipBoard={this.state.board}\n            /> */}\n            {this.createBoard}\n          </tr>\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}